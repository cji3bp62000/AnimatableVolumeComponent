using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    public static class AnimatableVolumeComponentCodeGenerator
    {
        public class VolumeParameterFieldInfo
        {
            public Type fieldType;
            public Type valueType;
            public string volumeComponentFieldName;
            public string helperFieldName;
        }

        public static void GenerateVolumeComponentHelperCode(Type type)
        {
            var vcType = typeof(VolumeComponent);
            if (!vcType.IsAssignableFrom(type)) {
                Debug.LogError($"{type.Name} did not inherit from {vcType.Name}!");
                return;
            }

            var fieldInfoList = new List<VolumeParameterFieldInfo>();
            FindParameters(type, ref fieldInfoList);

            var fieldIndent = "        ";
            var methodIndent = "            ";
            var fieldDeclareCode = "";
            var readMethodCode = "";
            var writeMethodCode = "";
            foreach (var fieldInfo in fieldInfoList) {
                // フィールド定義
                fieldDeclareCode += $"{fieldIndent}public bool override_{fieldInfo.helperFieldName};\n";
                fieldDeclareCode += $"{fieldIndent}public {fieldInfo.valueType.FullName} {fieldInfo.helperFieldName};\n";
                // 読み込み
                readMethodCode +=
                    $"{methodIndent}override_{fieldInfo.helperFieldName} = volumeComponent.{fieldInfo.volumeComponentFieldName}.overrideState;\n";
                readMethodCode +=
                    $"{methodIndent}{fieldInfo.helperFieldName} = volumeComponent.{fieldInfo.volumeComponentFieldName}.value;\n";
                // 書き込み
                writeMethodCode +=
                    $"{methodIndent}volumeComponent.{fieldInfo.volumeComponentFieldName}.overrideState = override_{fieldInfo.helperFieldName};\n";
                writeMethodCode +=
                    $"{methodIndent}volumeComponent.{fieldInfo.volumeComponentFieldName}.value = {fieldInfo.helperFieldName};\n";
            }

            var generatedCode = $@"// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{{
    [AnimatableOf(typeof({type.FullName}))]
    [ExecuteAlways]
    [RequireComponent(typeof(Volume)), RequireComponent(typeof(VolumeHelper))]
    [DisallowMultipleComponent]
    public class Animatable{type.Name} : AnimatableVolumeComponentBase
    {{
        public override Type TargetType {{ get; }} = typeof({type.FullName});

{fieldDeclareCode}

        private void WriteToVolumeComponent({type.FullName} volumeComponent)
        {{
            if (!volumeComponent) return;

            volumeComponent.active = active;
{writeMethodCode}
        }}

        private void ReadFromVolumeComponent({type.FullName} volumeComponent)
        {{
            if (!volumeComponent) return;

            active = volumeComponent.active;
{readMethodCode}
        }}

        private void Reset()
        {{
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<{type.FullName}>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }}

        private void OnValidate()
        {{
            WriteToVolumeComponent();
        }}

        private void OnDidApplyAnimationProperties()
        {{
            WriteToVolumeComponent();
        }}

        public override void WriteToVolumeComponent()
        {{
            if (!volumeHelper.TryGet<{type.FullName}>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
            ReadFromVolumeComponent(volumeComponent);
        }}
    }}
}}
";

            // 生成したコードをファイルに書き込む
            var path = $"{Application.dataPath}/AnimatableVolumeComponent/Generated/";
            var fileName = $"Animatable{type.Name}.cs";
            System.IO.Directory.CreateDirectory(path);
            Debug.Log($"writing to {path + fileName}");
            System.IO.File.WriteAllText(path + fileName, generatedCode);
        }

        /// <summary>
        /// 一層のみのパラメータ検索
        /// </summary>
        /// <param name="targetVolumeComponentType"></param>
        /// <param name="parameterFieldList"></param>
        private static void FindParameters(Type targetVolumeComponentType, ref List<VolumeParameterFieldInfo> parameterFieldList)
        {
            var fields = targetVolumeComponentType
                .GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                .OrderBy(t => t.MetadataToken); // Guaranteed order

            foreach (var field in fields) {
                if (!field.FieldType.IsSubclassOf(typeof(VolumeParameter))) continue;
                // skip obsolete fields
                if (field.GetCustomAttribute<ObsoleteAttribute>() != null) continue;

                var parameterValueType = GetVolumeParameterValueType(field.FieldType);
                parameterFieldList.Add(new VolumeParameterFieldInfo()
                {
                    fieldType = field.FieldType,
                    valueType = parameterValueType,
                    volumeComponentFieldName = field.Name,
                    helperFieldName = field.Name,
                });
            }
        }

        private static Type GetVolumeParameterValueType(Type volumeParameterType)
        {
            var directChildType = volumeParameterType;
            while (!directChildType.IsGenericType || directChildType.GetGenericTypeDefinition() != typeof(VolumeParameter<>)) {
                directChildType = directChildType.BaseType;
                if (directChildType == null) {
                    return null;
                }
            }
            return directChildType.GetGenericArguments()[0];
        }

        public static void GenerateMapCode(Dictionary<Type, Type> map)
        {
            var mapDicItemCode = string.Join(
                "\n",
                map.Select(kvp => $"            Map[typeof({kvp.Key.FullName})] = typeof({kvp.Value.FullName});")
            );

            var generatedCode = $@"// <auto-generated />

using System;
using System.Collections.Generic;
using UnityEngine;

namespace TsukimiNeko.AnimatableVolumeComponent
{{
    public static partial class AnimatableVolumeComponentMapping
    {{
#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#endif
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        public static void InitializeMap()
        {{
{mapDicItemCode}
        }}
    }}
}}
";

            var path = $"{Application.dataPath}/AnimatableVolumeComponent/Generated/";
            var fileName = "AnimatableVolumeComponentMapping.g.cs";
            System.IO.Directory.CreateDirectory(path);
            Debug.Log($"writing to {path + fileName}");
            System.IO.File.WriteAllText(path + fileName, generatedCode);
        }
    }
}
