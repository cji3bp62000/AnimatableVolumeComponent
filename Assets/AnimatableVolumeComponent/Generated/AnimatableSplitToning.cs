// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.SplitToning))]
    [DisallowMultipleComponent]
    public class AnimatableSplitToning : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.SplitToning);

        public bool override_shadows;
        public UnityEngine.Color shadows;
        public bool override_highlights;
        public UnityEngine.Color highlights;
        public bool override_balance;
        public System.Single balance;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.SplitToning volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.shadows.overrideState = override_shadows;
            volumeComponent.shadows.value = shadows;
            volumeComponent.highlights.overrideState = override_highlights;
            volumeComponent.highlights.value = highlights;
            volumeComponent.balance.overrideState = override_balance;
            volumeComponent.balance.value = balance;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.SplitToning volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_shadows = volumeComponent.shadows.overrideState;
            shadows = volumeComponent.shadows.value;
            override_highlights = volumeComponent.highlights.overrideState;
            highlights = volumeComponent.highlights.value;
            override_balance = volumeComponent.balance.overrideState;
            balance = volumeComponent.balance.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.SplitToning>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.SplitToning>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.SplitToning>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
