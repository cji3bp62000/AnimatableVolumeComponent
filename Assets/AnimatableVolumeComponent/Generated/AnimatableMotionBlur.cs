// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.MotionBlur))]
    [DisallowMultipleComponent]
    public class AnimatableMotionBlur : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.MotionBlur);

        public bool override_mode;
        public UnityEngine.Rendering.Universal.MotionBlurMode mode;
        public bool override_quality;
        public UnityEngine.Rendering.Universal.MotionBlurQuality quality;
        public bool override_intensity;
        public System.Single intensity;
        public bool override_clamp;
        public System.Single clamp;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.MotionBlur volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.mode.overrideState = override_mode;
            volumeComponent.mode.value = mode;
            volumeComponent.quality.overrideState = override_quality;
            volumeComponent.quality.value = quality;
            volumeComponent.intensity.overrideState = override_intensity;
            volumeComponent.intensity.value = intensity;
            volumeComponent.clamp.overrideState = override_clamp;
            volumeComponent.clamp.value = clamp;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.MotionBlur volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_mode = volumeComponent.mode.overrideState;
            mode = volumeComponent.mode.value;
            override_quality = volumeComponent.quality.overrideState;
            quality = volumeComponent.quality.value;
            override_intensity = volumeComponent.intensity.overrideState;
            intensity = volumeComponent.intensity.value;
            override_clamp = volumeComponent.clamp.overrideState;
            clamp = volumeComponent.clamp.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.MotionBlur>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.MotionBlur>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.MotionBlur>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
