// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.ChannelMixer))]
    [DisallowMultipleComponent]
    public class AnimatableChannelMixer : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.ChannelMixer);

        public bool override_redOutRedIn;
        public System.Single redOutRedIn;
        public bool override_redOutGreenIn;
        public System.Single redOutGreenIn;
        public bool override_redOutBlueIn;
        public System.Single redOutBlueIn;
        public bool override_greenOutRedIn;
        public System.Single greenOutRedIn;
        public bool override_greenOutGreenIn;
        public System.Single greenOutGreenIn;
        public bool override_greenOutBlueIn;
        public System.Single greenOutBlueIn;
        public bool override_blueOutRedIn;
        public System.Single blueOutRedIn;
        public bool override_blueOutGreenIn;
        public System.Single blueOutGreenIn;
        public bool override_blueOutBlueIn;
        public System.Single blueOutBlueIn;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.ChannelMixer volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.redOutRedIn.overrideState = override_redOutRedIn;
            volumeComponent.redOutRedIn.value = redOutRedIn;
            volumeComponent.redOutGreenIn.overrideState = override_redOutGreenIn;
            volumeComponent.redOutGreenIn.value = redOutGreenIn;
            volumeComponent.redOutBlueIn.overrideState = override_redOutBlueIn;
            volumeComponent.redOutBlueIn.value = redOutBlueIn;
            volumeComponent.greenOutRedIn.overrideState = override_greenOutRedIn;
            volumeComponent.greenOutRedIn.value = greenOutRedIn;
            volumeComponent.greenOutGreenIn.overrideState = override_greenOutGreenIn;
            volumeComponent.greenOutGreenIn.value = greenOutGreenIn;
            volumeComponent.greenOutBlueIn.overrideState = override_greenOutBlueIn;
            volumeComponent.greenOutBlueIn.value = greenOutBlueIn;
            volumeComponent.blueOutRedIn.overrideState = override_blueOutRedIn;
            volumeComponent.blueOutRedIn.value = blueOutRedIn;
            volumeComponent.blueOutGreenIn.overrideState = override_blueOutGreenIn;
            volumeComponent.blueOutGreenIn.value = blueOutGreenIn;
            volumeComponent.blueOutBlueIn.overrideState = override_blueOutBlueIn;
            volumeComponent.blueOutBlueIn.value = blueOutBlueIn;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.ChannelMixer volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_redOutRedIn = volumeComponent.redOutRedIn.overrideState;
            redOutRedIn = volumeComponent.redOutRedIn.value;
            override_redOutGreenIn = volumeComponent.redOutGreenIn.overrideState;
            redOutGreenIn = volumeComponent.redOutGreenIn.value;
            override_redOutBlueIn = volumeComponent.redOutBlueIn.overrideState;
            redOutBlueIn = volumeComponent.redOutBlueIn.value;
            override_greenOutRedIn = volumeComponent.greenOutRedIn.overrideState;
            greenOutRedIn = volumeComponent.greenOutRedIn.value;
            override_greenOutGreenIn = volumeComponent.greenOutGreenIn.overrideState;
            greenOutGreenIn = volumeComponent.greenOutGreenIn.value;
            override_greenOutBlueIn = volumeComponent.greenOutBlueIn.overrideState;
            greenOutBlueIn = volumeComponent.greenOutBlueIn.value;
            override_blueOutRedIn = volumeComponent.blueOutRedIn.overrideState;
            blueOutRedIn = volumeComponent.blueOutRedIn.value;
            override_blueOutGreenIn = volumeComponent.blueOutGreenIn.overrideState;
            blueOutGreenIn = volumeComponent.blueOutGreenIn.value;
            override_blueOutBlueIn = volumeComponent.blueOutBlueIn.overrideState;
            blueOutBlueIn = volumeComponent.blueOutBlueIn.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.ChannelMixer>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ChannelMixer>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ChannelMixer>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
