// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.ColorLookup))]
    [DisallowMultipleComponent]
    public class AnimatableColorLookup : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.ColorLookup);

        public bool override_texture;
        public UnityEngine.Texture texture;
        public bool override_contribution;
        public System.Single contribution;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.ColorLookup volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.texture.overrideState = override_texture;
            volumeComponent.texture.value = texture;
            volumeComponent.contribution.overrideState = override_contribution;
            volumeComponent.contribution.value = contribution;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.ColorLookup volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_texture = volumeComponent.texture.overrideState;
            texture = volumeComponent.texture.value;
            override_contribution = volumeComponent.contribution.overrideState;
            contribution = volumeComponent.contribution.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.ColorLookup>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ColorLookup>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ColorLookup>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
