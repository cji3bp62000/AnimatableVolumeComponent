// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.DepthOfField))]
    [DisallowMultipleComponent]
    public class AnimatableDepthOfField : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.DepthOfField);

        public bool override_mode;
        public UnityEngine.Rendering.Universal.DepthOfFieldMode mode;
        public bool override_gaussianStart;
        public System.Single gaussianStart;
        public bool override_gaussianEnd;
        public System.Single gaussianEnd;
        public bool override_gaussianMaxRadius;
        public System.Single gaussianMaxRadius;
        public bool override_highQualitySampling;
        public System.Boolean highQualitySampling;
        public bool override_focusDistance;
        public System.Single focusDistance;
        public bool override_aperture;
        public System.Single aperture;
        public bool override_focalLength;
        public System.Single focalLength;
        public bool override_bladeCount;
        public System.Int32 bladeCount;
        public bool override_bladeCurvature;
        public System.Single bladeCurvature;
        public bool override_bladeRotation;
        public System.Single bladeRotation;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.DepthOfField volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.mode.overrideState = override_mode;
            volumeComponent.mode.value = mode;
            volumeComponent.gaussianStart.overrideState = override_gaussianStart;
            volumeComponent.gaussianStart.value = gaussianStart;
            volumeComponent.gaussianEnd.overrideState = override_gaussianEnd;
            volumeComponent.gaussianEnd.value = gaussianEnd;
            volumeComponent.gaussianMaxRadius.overrideState = override_gaussianMaxRadius;
            volumeComponent.gaussianMaxRadius.value = gaussianMaxRadius;
            volumeComponent.highQualitySampling.overrideState = override_highQualitySampling;
            volumeComponent.highQualitySampling.value = highQualitySampling;
            volumeComponent.focusDistance.overrideState = override_focusDistance;
            volumeComponent.focusDistance.value = focusDistance;
            volumeComponent.aperture.overrideState = override_aperture;
            volumeComponent.aperture.value = aperture;
            volumeComponent.focalLength.overrideState = override_focalLength;
            volumeComponent.focalLength.value = focalLength;
            volumeComponent.bladeCount.overrideState = override_bladeCount;
            volumeComponent.bladeCount.value = bladeCount;
            volumeComponent.bladeCurvature.overrideState = override_bladeCurvature;
            volumeComponent.bladeCurvature.value = bladeCurvature;
            volumeComponent.bladeRotation.overrideState = override_bladeRotation;
            volumeComponent.bladeRotation.value = bladeRotation;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.DepthOfField volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_mode = volumeComponent.mode.overrideState;
            mode = volumeComponent.mode.value;
            override_gaussianStart = volumeComponent.gaussianStart.overrideState;
            gaussianStart = volumeComponent.gaussianStart.value;
            override_gaussianEnd = volumeComponent.gaussianEnd.overrideState;
            gaussianEnd = volumeComponent.gaussianEnd.value;
            override_gaussianMaxRadius = volumeComponent.gaussianMaxRadius.overrideState;
            gaussianMaxRadius = volumeComponent.gaussianMaxRadius.value;
            override_highQualitySampling = volumeComponent.highQualitySampling.overrideState;
            highQualitySampling = volumeComponent.highQualitySampling.value;
            override_focusDistance = volumeComponent.focusDistance.overrideState;
            focusDistance = volumeComponent.focusDistance.value;
            override_aperture = volumeComponent.aperture.overrideState;
            aperture = volumeComponent.aperture.value;
            override_focalLength = volumeComponent.focalLength.overrideState;
            focalLength = volumeComponent.focalLength.value;
            override_bladeCount = volumeComponent.bladeCount.overrideState;
            bladeCount = volumeComponent.bladeCount.value;
            override_bladeCurvature = volumeComponent.bladeCurvature.overrideState;
            bladeCurvature = volumeComponent.bladeCurvature.value;
            override_bladeRotation = volumeComponent.bladeRotation.overrideState;
            bladeRotation = volumeComponent.bladeRotation.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.DepthOfField>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.DepthOfField>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.DepthOfField>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
