// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.Tonemapping))]
    [ExecuteAlways]
    [RequireComponent(typeof(Volume)), RequireComponent(typeof(VolumeHelper))]
    [DisallowMultipleComponent]
    public class AnimatableTonemapping : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.Tonemapping);

        public bool override_mode;
        public UnityEngine.Rendering.Universal.TonemappingMode mode;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.Tonemapping volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.mode.overrideState = override_mode;
            volumeComponent.mode.value = mode;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.Tonemapping volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_mode = volumeComponent.mode.overrideState;
            mode = volumeComponent.mode.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.Tonemapping>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        private void OnValidate()
        {
            WriteToVolumeComponent();
        }

        private void OnDidApplyAnimationProperties()
        {
            WriteToVolumeComponent();
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.Tonemapping>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
