// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.LensDistortion))]
    [DisallowMultipleComponent]
    public class AnimatableLensDistortion : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.LensDistortion);

        public bool override_intensity;
        public System.Single intensity;
        public bool override_xMultiplier;
        public System.Single xMultiplier;
        public bool override_yMultiplier;
        public System.Single yMultiplier;
        public bool override_center;
        public UnityEngine.Vector2 center;
        public bool override_scale;
        public System.Single scale;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.LensDistortion volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.intensity.overrideState = override_intensity;
            volumeComponent.intensity.value = intensity;
            volumeComponent.xMultiplier.overrideState = override_xMultiplier;
            volumeComponent.xMultiplier.value = xMultiplier;
            volumeComponent.yMultiplier.overrideState = override_yMultiplier;
            volumeComponent.yMultiplier.value = yMultiplier;
            volumeComponent.center.overrideState = override_center;
            volumeComponent.center.value = center;
            volumeComponent.scale.overrideState = override_scale;
            volumeComponent.scale.value = scale;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.LensDistortion volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_intensity = volumeComponent.intensity.overrideState;
            intensity = volumeComponent.intensity.value;
            override_xMultiplier = volumeComponent.xMultiplier.overrideState;
            xMultiplier = volumeComponent.xMultiplier.value;
            override_yMultiplier = volumeComponent.yMultiplier.overrideState;
            yMultiplier = volumeComponent.yMultiplier.value;
            override_center = volumeComponent.center.overrideState;
            center = volumeComponent.center.value;
            override_scale = volumeComponent.scale.overrideState;
            scale = volumeComponent.scale.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.LensDistortion>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.LensDistortion>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.LensDistortion>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
