// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights))]
    [DisallowMultipleComponent]
    public class AnimatableShadowsMidtonesHighlights : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights);

        public bool override_shadows;
        public UnityEngine.Vector4 shadows;
        public bool override_midtones;
        public UnityEngine.Vector4 midtones;
        public bool override_highlights;
        public UnityEngine.Vector4 highlights;
        public bool override_shadowsStart;
        public System.Single shadowsStart;
        public bool override_shadowsEnd;
        public System.Single shadowsEnd;
        public bool override_highlightsStart;
        public System.Single highlightsStart;
        public bool override_highlightsEnd;
        public System.Single highlightsEnd;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.shadows.overrideState = override_shadows;
            volumeComponent.shadows.value = shadows;
            volumeComponent.midtones.overrideState = override_midtones;
            volumeComponent.midtones.value = midtones;
            volumeComponent.highlights.overrideState = override_highlights;
            volumeComponent.highlights.value = highlights;
            volumeComponent.shadowsStart.overrideState = override_shadowsStart;
            volumeComponent.shadowsStart.value = shadowsStart;
            volumeComponent.shadowsEnd.overrideState = override_shadowsEnd;
            volumeComponent.shadowsEnd.value = shadowsEnd;
            volumeComponent.highlightsStart.overrideState = override_highlightsStart;
            volumeComponent.highlightsStart.value = highlightsStart;
            volumeComponent.highlightsEnd.overrideState = override_highlightsEnd;
            volumeComponent.highlightsEnd.value = highlightsEnd;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_shadows = volumeComponent.shadows.overrideState;
            shadows = volumeComponent.shadows.value;
            override_midtones = volumeComponent.midtones.overrideState;
            midtones = volumeComponent.midtones.value;
            override_highlights = volumeComponent.highlights.overrideState;
            highlights = volumeComponent.highlights.value;
            override_shadowsStart = volumeComponent.shadowsStart.overrideState;
            shadowsStart = volumeComponent.shadowsStart.value;
            override_shadowsEnd = volumeComponent.shadowsEnd.overrideState;
            shadowsEnd = volumeComponent.shadowsEnd.value;
            override_highlightsStart = volumeComponent.highlightsStart.overrideState;
            highlightsStart = volumeComponent.highlightsStart.value;
            override_highlightsEnd = volumeComponent.highlightsEnd.overrideState;
            highlightsEnd = volumeComponent.highlightsEnd.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.ShadowsMidtonesHighlights>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
