// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Rendering;

namespace TsukimiNeko.AnimatableVolumeComponent
{
    [AnimatableOf(typeof(UnityEngine.Rendering.Universal.Bloom))]
    [DisallowMultipleComponent]
    public class AnimatableBloom : AnimatableVolumeComponentBase
    {
        public override Type TargetType { get; } = typeof(UnityEngine.Rendering.Universal.Bloom);

        public bool override_threshold;
        public System.Single threshold;
        public bool override_intensity;
        public System.Single intensity;
        public bool override_scatter;
        public System.Single scatter;
        public bool override_clamp;
        public System.Single clamp;
        public bool override_tint;
        public UnityEngine.Color tint;
        public bool override_highQualityFiltering;
        public System.Boolean highQualityFiltering;
        public bool override_skipIterations;
        public System.Int32 skipIterations;
        public bool override_dirtTexture;
        public UnityEngine.Texture dirtTexture;
        public bool override_dirtIntensity;
        public System.Single dirtIntensity;


        private void WriteToVolumeComponent(UnityEngine.Rendering.Universal.Bloom volumeComponent)
        {
            if (!volumeComponent) return;

            volumeComponent.active = active;
            volumeComponent.threshold.overrideState = override_threshold;
            volumeComponent.threshold.value = threshold;
            volumeComponent.intensity.overrideState = override_intensity;
            volumeComponent.intensity.value = intensity;
            volumeComponent.scatter.overrideState = override_scatter;
            volumeComponent.scatter.value = scatter;
            volumeComponent.clamp.overrideState = override_clamp;
            volumeComponent.clamp.value = clamp;
            volumeComponent.tint.overrideState = override_tint;
            volumeComponent.tint.value = tint;
            volumeComponent.highQualityFiltering.overrideState = override_highQualityFiltering;
            volumeComponent.highQualityFiltering.value = highQualityFiltering;
            volumeComponent.skipIterations.overrideState = override_skipIterations;
            volumeComponent.skipIterations.value = skipIterations;
            volumeComponent.dirtTexture.overrideState = override_dirtTexture;
            volumeComponent.dirtTexture.value = dirtTexture;
            volumeComponent.dirtIntensity.overrideState = override_dirtIntensity;
            volumeComponent.dirtIntensity.value = dirtIntensity;

        }

        private void ReadFromVolumeComponent(UnityEngine.Rendering.Universal.Bloom volumeComponent)
        {
            if (!volumeComponent) return;

            active = volumeComponent.active;
            override_threshold = volumeComponent.threshold.overrideState;
            threshold = volumeComponent.threshold.value;
            override_intensity = volumeComponent.intensity.overrideState;
            intensity = volumeComponent.intensity.value;
            override_scatter = volumeComponent.scatter.overrideState;
            scatter = volumeComponent.scatter.value;
            override_clamp = volumeComponent.clamp.overrideState;
            clamp = volumeComponent.clamp.value;
            override_tint = volumeComponent.tint.overrideState;
            tint = volumeComponent.tint.value;
            override_highQualityFiltering = volumeComponent.highQualityFiltering.overrideState;
            highQualityFiltering = volumeComponent.highQualityFiltering.value;
            override_skipIterations = volumeComponent.skipIterations.overrideState;
            skipIterations = volumeComponent.skipIterations.value;
            override_dirtTexture = volumeComponent.dirtTexture.overrideState;
            dirtTexture = volumeComponent.dirtTexture.value;
            override_dirtIntensity = volumeComponent.dirtIntensity.overrideState;
            dirtIntensity = volumeComponent.dirtIntensity.value;

        }

        private void Reset()
        {
            var volume = GetComponent<Volume>();
            if (!volume || !volume.sharedProfile || !volume.sharedProfile.TryGet<UnityEngine.Rendering.Universal.Bloom>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }

        public override void WriteToVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.Bloom>(out var volumeComponent)) return;

            WriteToVolumeComponent(volumeComponent);
        }

        public override void ReadFromVolumeComponent()
        {
            if (!volumeHelper.TryGet<UnityEngine.Rendering.Universal.Bloom>(out var volumeComponent)) return;

            ReadFromVolumeComponent(volumeComponent);
        }
    }
}
